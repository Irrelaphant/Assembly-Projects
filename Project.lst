Microsoft (R) Macro Assembler Version 14.34.31942.0	    11/27/23 15:31:09
SamCullebLabQ1.asm					     Page 1 - 1


				.386
				.model flat, stdcall
				.stack 4096
				ExitProcess PROTO, dwExitCode: DWORD
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .MODEL flat, stdcall
SmallWin.inc(11) : warning A4011:multiple .MODEL directives found : .MODEL ignored
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				;Sam Cullen COSC-220 Final Project, Snake Game
				;
				;Sources: 
				;
				;
				;https://www.youtube.com/watch?v=iRcXMPIDJHY&t
				;https://github.com/NikitaIvanovV/snake-asm/blob/master/snake.asm
				;
				;
 00000000			.data

				;the "wall" array is full of the ASCII character that creates a block
 00000000  00000034 [		xWall BYTE 52 DUP(219),0
	    DB
	   ] 00

				;This is the corners of the wall, so its the top left, top right, bottem left and bottom right corner coordinates. 
 00000035 22 22 55 55		xPosWall BYTE 34,34,85,85			
 00000039 01 1A 01 1A		yPosWall BYTE 1,26,1,26

				;A variable to store the actual decimal value of the score, and the string to be printed when the score is displayed
 0000003D 73 63 6F 72 65	strScore BYTE "score: ",0
	   3A 20 00
 00000045 00			score BYTE 0

				;the snake starts with the ASCII 153 simple which is the letter O with the little dots on top, I thought it looked a bit like a funny face
 00000046 99			snake BYTE 153, 104 DUP("o")
	   00000068 [
	    6F
	   ]

				;the player position array
 000000AF 2D 2C 2B 2A 29	xPos BYTE 45,44,43,42,41, 100 DUP(?)
	   00000064 [
	    00
	   ]
 00000118 0F 0F 0F 0F 0F	yPos BYTE 15,15,15,15,15, 100 DUP(?)
	   00000064 [
	    00
	   ]

				;All of these strings are printed whenever there is an outcome from the snake
				;so when you die try again gets printed, when you input a invalid input invalid input prints, and so on
 00000181 53 74 61 72 74	strTryAgain BYTE "Start Over?  1=yes, 0=no",0
	   20 4F 76 65 72
	   3F 20 20 31 3D
	   79 65 73 2C 20
	   30 3D 6E 6F 00
 0000019A 69 6E 76 61 6C	invalidInput BYTE "invalid input",0
	   69 64 20 69 6E
	   70 75 74 00
 000001A8 79 6F 75 20 64	strDeath BYTE "you died ",0
	   69 65 64 20 00
 000001B2 20 70 6F 69 6E	strPrintingScore BYTE " point(s)",0
	   74 28 73 29 00

				;the blank byte is to fill in the space of the array to clear the last input
 000001BC 20 20 20 20 20	blank BYTE "                                     ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 00

				;the x and y that are randomly generated by the GetRandomCoinLocation PROC puts two random numbers into these x and y values
 000001E2 00			xCoin BYTE ?
 000001E3 00			yCoin BYTE ?

				;Input char is set to "+" at the start of the game that way if the game hasn't started left, the first input can't be left. So the snake cant go inside itself
 000001E4 2B			inputChar BYTE "+"					
 000001E5 00			lastInputChar BYTE ?				

				;The stirng and variable to store the speed and the string to print when asking
 000001E6 4C 65 76 65 6C	strDifficulty BYTE "Level: ",0
	   3A 20 00
 000001EE 00000000		speed	DWORD 0

				;same for this, strings to be printed in the title sequence
 000001F2 57 65 6C 63 6F	strTitleSentence BYTE "Welcome to my Snake Game!", 0
	   6D 65 20 74 6F
	   20 6D 79 20 53
	   6E 61 6B 65 20
	   47 61 6D 65 21
	   00
 0000020C 70 6C 65 61 73	strSpaceToStart BYTE "please press space to start :)", 0
	   65 20 70 72 65
	   73 73 20 73 70
	   61 63 65 20 74
	   6F 20 73 74 61
	   72 74 20 3A 29
	   00
 0000022B 50 69 63 6B 20	strInstructions BYTE "Pick a difficulty (1-3) after pressing space to start"
	   61 20 64 69 66
	   66 69 63 75 6C
	   74 79 20 28 31
	   2D 33 29 20 61
	   66 74 65 72 20
	   70 72 65 73 73
	   69 6E 67 20 73
	   70 61 63 65 20
	   74 6F 20 73 74
	   61 72 74
 00000000			.code
 00000000			main PROC

 00000000  E8 0000026F			call TitleScreen

 00000005  E8 0000034C			call DrawWall			
 0000000A  E8 00000452			call DrawPoints		
 0000000F  E8 000003DD			call Difficulty		

					;esi gets set to 0 to point to which part of the snake drawing procedure must begin 
					;ecx is 5 because of how many segments of the snake will be drawn (5-1 since esi gets incremented first) so four sections of the snake body are drawn
 00000014  BE 00000000			mov esi,0
 00000019  B9 00000005			mov ecx,5
 0000001E			drawSnake:

					;drawplayer draws the snake, this procedure exists though so that when the game and the player requested to restart
					;this procedure can get called again so the snake can be redrawn at the starting position
 0000001E  E8 0000045C			call DrawPlayer			
 00000023  46				inc esi
 00000024  E2 F8		loop drawSnake
					
						;this is the process used to generate random numbers for the coin, place it on the grid and since the snake has been generated we 
						;are able to check whether or the coin intersects with the snakes body
 00000026  E8 00000000 E		call Randomize
 0000002B  E8 000004C4			call CreateRandom
 00000030  E8 0000051A			call DrawCoin			

					
 00000035				gameLoop:

						;this moves the curser to these coordinates here 
 00000035  B2 01				mov dl,1						
 00000037  B6 01				mov dh,1
 00000039  E8 00000000 E			call Gotoxy

						;get the key input and more importantly, jumps if nothing gets input 
 0000003E  E8 00000000 E			call ReadKey
 00000043  74 11		        jz noKey						
 00000045					processInput:
 00000045  8A 1D 000001E4 R			mov bl, inputChar
 0000004B  88 1D 000001E5 R			mov lastInputChar, bl
 00000051  A2 000001E4 R			mov inputChar,al				

 00000056					noKey:

							;at any point in time if the play inputs "x", the game will end
 00000056  80 3D 000001E4 R				cmp inputChar,"x"	
	   78
 0000005D  0F 84 00000203				je exitgame						

							;all of these are the game inputs and the respective border in the game they must check if they are colliding into
							;
 00000063  80 3D 000001E4 R				cmp inputChar,"w"
	   77
 0000006A  0F 84 0000009F				je checkTop

 00000070  80 3D 000001E4 R				cmp inputChar,"s"
	   73
 00000077  74 14					je checkBottom

 00000079  80 3D 000001E4 R				cmp inputChar,"a"
	   61
 00000080  74 32					je checkLeft

 00000082  80 3D 000001E4 R				cmp inputChar,"d"
	   64
 00000089  74 5D					je checkRight

								;if nothing else was entered, it goes back up to the top
 0000008B  75 A8						jne gameLoop					


							;All of these are the procedures used to check if the wall is going to collide with the player 
 0000008D						checkBottom:	
 0000008D  80 3D 000001E5 R					cmp lastInputChar, "w"
	   77
 00000094  0F 84 000001AB					je dontChgDirection		;cant go down after going up
 0000009A  8A 0D 0000003A R					mov cl, yPosWall[1]
 000000A0  FE C9						dec cl					;one unit ubove the y-coordinate of the lower bound
 000000A2  38 0D 00000118 R					cmp yPos[0],cl
 000000A8  0F 8C 000000BF					jl moveDown
 000000AE  0F 84 000001A8					je died					;die if the snake touchez into da wall

 000000B4						checkLeft:		

									;So when the game starts the lastInputChar variable is set to "+", that way when you are in the starting position (facing right) the snake still can't turn into itself				
 000000B4  80 3D 000001E5 R						cmp lastInputChar, "+"	
	   2B
								
 000000BB  0F 84 0000018F					je dontGoLeft
 000000C1  80 3D 000001E5 R					cmp lastInputChar, "d"
	   64
 000000C8  0F 84 00000177					je dontChgDirection
 000000CE  8A 0D 00000035 R					mov cl, xPosWall[0]
 000000D4  FE C1						inc cl
 000000D6  38 0D 000000AF R					cmp xPos[0],cl
 000000DC  0F 8F 000000C6					jg moveLeft
 000000E2  0F 84 00000174					je died					

 000000E8						checkRight:		
 000000E8  80 3D 000001E5 R					cmp lastInputChar, "a"
	   61
 000000EF  0F 84 00000150					je dontChgDirection
 000000F5  8A 0D 00000037 R					mov cl, xPosWall[2]
 000000FB  FE C9						dec cl
 000000FD  38 0D 000000AF R					cmp xPos[0],cl
 00000103  0F 8C 000000D4					jl moveRight
 00000109  0F 84 0000014D					je died						

 0000010F						checkTop:		
 0000010F  80 3D 000001E5 R					cmp lastInputChar, "s"
	   73
 00000116  0F 84 00000129					je dontChgDirection
 0000011C  8A 0D 00000039 R					mov cl, yPosWall[0]
 00000122  FE C1						inc cl
 00000124  38 0D 00000118 R					cmp yPos,cl
 0000012A  7F 06						jg moveUp
 0000012C  0F 84 0000012A					je died					
						

 00000132					moveUp:		

							;so an issue I had with this was when moving up, its a obviously a different amount of columns vs rows, so if the same speed was kept
							;the snake player would end up going crazy fast, so I have a delay called (that is set based off the difficulty)
							;the delay gets enabled anytime you move up or down, solving the speed issue
 00000132  A1 000001EE R				mov eax, speed		
 00000137  03 05 000001EE R				add eax, speed
 0000013D  E8 00000000 E				call delay

							;esi index 0 is the snake head
 00000142  BE 00000000					mov esi, 0		
							
 00000147  E8 0000038B					call UpdatePlayer	
 0000014C  8A A6 00000118 R				mov ah, yPos[esi]	
 00000152  8A 86 000000AF R				mov al, xPos[esi]	;al and ah stores the pos of the snakes next unit 
 00000158  FE 8E 00000118 R				dec yPos[esi]		;moves the head up by decrementing the value and then after you go up it 
 0000015E  E8 0000031C					call DrawPlayer		
 00000163  E8 00000338					call DrawBody
 00000168  E8 0000040F					call CheckIfTouch

						
						;move up is the same, but instead of decrementing, it increases, that way the head moves downward
 0000016D					moveDown:			
 0000016D  A1 000001EE R				mov eax, speed
 00000172  03 05 000001EE R				add eax, speed
 00000178  E8 00000000 E				call delay
 0000017D  BE 00000000					mov esi, 0
 00000182  E8 00000350					call UpdatePlayer
 00000187  8A A6 00000118 R				mov ah, yPos[esi]
 0000018D  8A 86 000000AF R				mov al, xPos[esi]
 00000193  FE 86 00000118 R				inc yPos[esi]
 00000199  E8 000002E1					call DrawPlayer
 0000019E  E8 000002FD					call DrawBody
 000001A3  E8 000003D4					call CheckIfTouch


						
						;Move left and move right are pretty simple, its the same idea but instead of calling a delay twice as long its only the normal delay
						;that is based off of the difficulty

 000001A8					moveLeft:		
 000001A8  A1 000001EE R				mov eax, speed
 000001AD  E8 00000000 E				call delay
 000001B2  BE 00000000					mov esi, 0
 000001B7  E8 0000031B					call UpdatePlayer
 000001BC  8A A6 00000118 R				mov ah, yPos[esi]
 000001C2  8A 86 000000AF R				mov al, xPos[esi]
 000001C8  FE 8E 000000AF R				dec xPos[esi]
 000001CE  E8 000002AC					call DrawPlayer
 000001D3  E8 000002C8					call DrawBody
 000001D8  E8 0000039F					call CheckIfTouch
 000001DD					moveRight:		
						
 000001DD  A1 000001EE R				mov eax, speed
 000001E2  E8 00000000 E				call delay
 000001E7  BE 00000000					mov esi, 0
 000001EC  E8 000002E6					call UpdatePlayer
 000001F1  8A A6 00000118 R				mov ah, yPos[esi]
 000001F7  8A 86 000000AF R				mov al, xPos[esi]
 000001FD  FE 86 000000AF R				inc xPos[esi]
 00000203  E8 00000277					call DrawPlayer
 00000208  E8 00000293					call DrawBody
 0000020D  E8 0000036A					call CheckIfTouch

					; getting points
 00000212					checkcoin::
 00000212  BE 00000000				mov esi,0
 00000217  8A 1D 000000AF R			mov bl,xPos[0]
 0000021D  3A 1D 000001E2 R			cmp bl,xCoin

						;if the snake is not touching the coin reloop
 00000223  0F 85 FFFFFE0C			jne gameloop			
 00000229  8A 1D 00000118 R			mov bl,yPos[0]
 0000022F  3A 1D 000001E3 R			cmp bl,yCoin

						;again it is not interecting with the coin reloop
 00000235  0F 85 FFFFFDFA			jne gameloop			

						;if you IS eating the coin.... call eatcoin
 0000023B  E8 00000375				call EatCoin				

 00000240  E9 FFFFFDF0		jmp gameLoop					
				;restarts the gameloop when the player wants

					;can't let the player change direction mid input
 00000245				dontChgDirection:		
						;if the direction isn't changed then keep going the same direction
 00000245  88 1D 000001E4 R			mov inputChar, bl		
 0000024B  E9 FFFFFE06				jmp noKey				

					;can't go left at the start of the game
 00000250				dontGoLeft:				
 00000250  C6 05 000001E4 R			mov	inputChar, "+"		
	   2B

 00000257  E9 FFFFFDD9				jmp gameLoop			;restart the game loop

 0000025C				died::
 0000025C  E8 000003DC				call PlayerDeath
					 
 00000261				playagn::			
 00000261  E8 00000085				call RestartGame			;reinitialise everything
					
 00000266				exitgame::
					exit
 00000266  6A 00	   *	    push   +000000000h
 00000268  E8 00000000 E   *	    call   ExitProcess

				INVOKE ExitProcess,0
 0000026D  6A 00	   *	    push   +000000000h
 0000026F  E8 00000000 E   *	    call   ExitProcess
 00000274			main ENDP

 00000274			TitleScreen PROC

				    ; Display Snake Game Title Screen
 00000274  E8 00000000 E	    Call ClrScr
 00000279  B8 00000002		    mov eax, green
 0000027E  E8 00000000 E		call SetTextColor

 00000283  B2 2D			mov dl, 45
 00000285  B6 09			mov dh, 9
 00000287  E8 00000000 E		call Gotoxy
 0000028C  BA 000001F2 R		mov edx, OFFSET strTitleSentence
 00000291  E8 00000000 E		call WriteString

 00000296  B2 26			mov dl, 38
 00000298  B6 0E			mov dh, 14
 0000029A  E8 00000000 E		call Gotoxy
 0000029F  B8 00000004			mov eax, Red
 000002A4  E8 00000000 E		call SetTextColor
 000002A9  BA 0000022B R		mov edx, OFFSET strInstructions
 000002AE  E8 00000000 E		call WriteString


 000002B3  B8 00000002			mov eax, green
 000002B8  E8 00000000 E		call SetTextColor
 000002BD  B2 2B			mov dl, 43
 000002BF  B6 14			mov dh, 20
 000002C1  E8 00000000 E		call Gotoxy

					;wait for space bar for input
 000002C6  BA 0000020C R	    mov edx, OFFSET strSpaceToStart 
 000002CB  E8 00000000 E	    call WriteString

				    ; Wait for space bar press
 000002D0			    waitForKey:
 000002D0  E8 00000000 E	    call ReadKey
 000002D5  3C 20		    cmp al, ' ' ; Check if space bar is pressed
 000002D7  74 02		    je startGame
 000002D9  EB F5		    jmp waitForKey

 000002DB			    startGame:
 000002DB  E8 00000000 E	    Call ClrScr
 000002E0  B8 0000000F			mov eax, white
 000002E5  E8 00000000 E		call SetTextColor
 000002EA  C3			    ret
 000002EB			TitleScreen ENDP

				;this is the procedure to restart the entire game if the player inputs 1
 000002EB			RestartGame PROC

					;this will move the snake head to 45
 000002EB  C6 05 000000AF R		mov xPos[0], 45
	   2D
					;this moves the x of the rest of the snakes body parts
 000002F2  C6 05 000000B0 R		mov xPos[1], 44
	   2C
 000002F9  C6 05 000000B1 R		mov xPos[2], 43
	   2B
 00000300  C6 05 000000B2 R		mov xPos[3], 42
	   2A
					;this is the y coordinates of the snakes head
 00000307  C6 05 000000B3 R		mov xPos[4], 41
	   29

					;the y positions of the snakes body parts
 0000030E  C6 05 00000118 R		mov yPos[0], 15 ;y of the snakes head
	   0F
 00000315  C6 05 00000119 R		mov yPos[1], 15
	   0F
 0000031C  C6 05 0000011A R		mov yPos[2], 15
	   0F
 00000323  C6 05 0000011B R		mov yPos[3], 15
	   0F
 0000032A  C6 05 0000011C R		mov yPos[4], 15			
	   0F

						;this resets the score
 00000331  C6 05 00000045 R		mov score,0				;reinitialize score
	   00
						;clear last last input char
 00000338  C6 05 000001E5 R		mov lastInputChar, 0
	   00
						;the input char gets set to "+" 
 0000033F  C6 05 000001E4 R		mov	inputChar, "+"			
	   2B

					
 00000346  FE 0D 0000003C R		dec yPosWall[3]			;reset walls position, decrementing it by one will make it redraw the walls because the array will update

 0000034C  E8 00000000 E		Call ClrScr

 00000351  E9 FFFFFCAA			jmp main				;restart the main procedure
 00000356			RestartGame ENDP

				;this draws the wall, it makes the upper, lower then left and right walls by following the array and drawing the block ascii symbol
 00000356			DrawWall PROC	
						;upper wall
 00000356  B8 00000001					mov eax, blue
 0000035B  E8 00000000 E				call SetTextColor
 00000360  8A 15 00000035 R				mov dl,xPosWall[0]
 00000366  8A 35 00000039 R				mov dh,yPosWall[0]
 0000036C  E8 00000000 E				call Gotoxy	
 00000371  BA 00000000 R				mov edx,OFFSET xWall
 00000376  E8 00000000 E				call WriteString			

						;lower wall
 0000037B  8A 15 00000036 R				mov dl,xPosWall[1]
 00000381  8A 35 0000003A R				mov dh,yPosWall[1]
 00000387  E8 00000000 E				call Gotoxy	
 0000038C  BA 00000000 R				mov edx,OFFSET xWall	
 00000391  E8 00000000 E				call WriteString			

					;draw the right wall
 00000396  8A 15 00000037 R			mov dl, xPosWall[2]
 0000039C  8A 35 0000003B R			mov dh, yPosWall[2]
 000003A2  B8 000000DB				mov eax, 219	
 000003A7  FE 05 0000003C R			inc yPosWall[3]
 000003AD					L11: 
 000003AD  E8 00000000 E				call Gotoxy	
 000003B2  E8 00000000 E				call WriteChar	
 000003B7  FE C6					inc dh
 000003B9  3A 35 0000003C R				cmp dh, yPosWall[3]				
 000003BF  7C EC				jl L11

						;draw the wall on the left
 000003C1  8A 15 00000035 R			mov dl, xPosWall[0]
 000003C7  8A 35 00000039 R			mov dh, yPosWall[0]
 000003CD  B8 000000DB				mov eax, 219	
 000003D2					L12: 
 000003D2  E8 00000000 E				call Gotoxy	
 000003D7  E8 00000000 E				call WriteChar	
 000003DC  FE C6					inc dh
 000003DE  3A 35 0000003C R				cmp dh, yPosWall[3]			
 000003E4  7C EC				jl L12

					;set the text color back to normal 
 000003E6  B8 0000000F			mov eax, white
 000003EB  E8 00000000 E		call SetTextColor
 000003F0  C3				ret

 000003F1			DrawWall ENDP

				;this sets the speed of the snake to act as a difficulty measure
 000003F1			Difficulty PROC			
 000003F1  BA 00000000			mov edx,0
 000003F6  B2 01			mov dl,1				
 000003F8  B6 01			mov dh,1
 000003FA  E8 00000000 E		call Gotoxy	
 000003FF  BA 000001E6 R		mov edx,OFFSET strDifficulty	; prompt to enter integers (1,2,3)
 00000404  E8 00000000 E		call WriteString

					;the amount of delay gets put into esi temporarily
 00000409  BE 00000028			mov esi, 40				
 0000040E  B8 00000000			mov eax,0
 00000413  E8 00000000 E		call readInt			
 00000418  66| 83 F8 01			cmp ax,1				
 0000041C  7C 0E			jl invalidspeed
 0000041E  66| 83 F8 03			cmp ax, 3
 00000422  7F 08			jg invalidspeed
 00000424  F7 E6			mul esi	
						;then the variable gets a memory register
 00000426  A3 000001EE R		mov speed, eax			
 0000042B  C3				ret

					;if the user entered something that is not a usable input use this
 0000042C				invalidspeed:			
 0000042C  B2 69				mov dl,105				
 0000042E  B6 01				mov dh,1
 00000430  E8 00000000 E			call Gotoxy	

					;prints the invalid input error code
 00000435  BA 0000019A R		mov edx, OFFSET invalidInput				
 0000043A  E8 00000000 E		call WriteString
 0000043F  66| B8 05DC			mov ax, 1500
 00000443  E8 00000000 E		call delay
 00000448  B2 69			mov dl,105				
 0000044A  B6 01			mov dh,1
 0000044C  E8 00000000 E		call Gotoxy	

					;after one and a half seconds, erase the invalid input message by printing the blank string instead
 00000451  BA 000001BC R		mov edx, OFFSET blank				
 00000456  E8 00000000 E		call writeString
					
					;go back to the start so the user can input something functional
 0000045B  E8 FFFFFF91			call Difficulty					
 00000460  C3				ret

 00000461			Difficulty ENDP


 00000461			DrawPoints PROC		

					;go to this x and y in the terminal and print the "str score" string, and then write the actual value of the score
 00000461  B2 0A			mov dl, 10
 00000463  B6 03			mov dh, 3
 00000465  E8 00000000 E		call Gotoxy
 0000046A  BA 0000003D R		mov edx,OFFSET strScore		

 0000046F  E8 00000000 E		call WriteString
 00000474  B8 00000030			mov eax,"0" ;your score starts as zero
 00000479  E8 00000000 E		call WriteChar				
 0000047E  C3				ret

 0000047F			DrawPoints ENDP




 0000047F			DrawPlayer PROC			; draw player at (xPos,yPos)
					
					
 0000047F  8A 96 000000AF R		mov dl,xPos[esi]
 00000485  8A B6 00000118 R		mov dh,yPos[esi]
 0000048B  E8 00000000 E		call Gotoxy
 00000490  8A D0			mov dl, al			;temporarily save al in dl
 00000492  8A 86 00000046 R		mov al, snake[esi]		
 00000498  E8 00000000 E		call WriteChar
 0000049D  8A C2			mov al, dl			
 0000049F  C3				ret

 000004A0			DrawPlayer ENDP

 000004A0			DrawBody PROC				
						;procedure to print body of the snake
 000004A0  B9 00000004				mov ecx, 4
 000004A5  02 0D 00000045 R			add cl, score		;number of iterations to print the snake body n tail	

 000004AB					printbodyloop:	

 000004AB  46						inc esi				;loop to print remaining units of snake
 000004AC  E8 00000026					call UpdatePlayer
								;dl and dh will temporilty store the current position of the snakes body unit
 000004B1  8A 96 000000AF R				mov dl, xPos[esi]
 000004B7  8A B6 00000118 R				mov dh, yPos[esi]	
								;the position then gets updated based off the position of esi in the stack, so whatever body part of the snake according to esi
 000004BD  88 A6 00000118 R				mov yPos[esi], ah
 000004C3  88 86 000000AF R				mov xPos[esi], al	

							;the current position gets put back into al and ah
 000004C9  8A C2					mov al, dl
 000004CB  8A E6					mov ah,dh			
 000004CD  E8 FFFFFFAD				call DrawPlayer
 000004D2  3B F1				cmp esi, ecx
 000004D4  7C D5				jl printbodyloop

 000004D6  C3				ret
 000004D7			DrawBody ENDP

 000004D7			UpdatePlayer PROC		
					;this will delete the last section of the snake by replacing it with a "blank" mark
 000004D7  8A 96 000000AF R			mov dl, xPos[esi]
 000004DD  8A B6 00000118 R			mov dh, yPos[esi]
					;us al to temporily store the location
 000004E3  E8 00000000 E			call Gotoxy
 000004E8  8A D0				mov dl, al			
 000004EA  B0 20				mov al, " "

						;prints the empty character and then restores dl
 000004EC  E8 00000000 E		call WriteChar
 000004F1  8A C2			mov al, dl ;reset
 000004F3  C3				ret

 000004F4			UpdatePlayer ENDP

 000004F4			CreateRandom PROC				
						;This procedure creates a random x and y value for the coin by using the random range function
						;the random range guesses between 0 and 45 since 45 gets moved into eax, and then 40 is added that way it is added to fit inside the player grid
 000004F4  B8 0000002D			mov eax,45
 000004F9  E8 00000000 E		call RandomRange	
 000004FE  83 C0 28			add eax, 40			
 00000501  A2 000001E2 R		mov xCoin, al

						;The same thing happens but coordinates with the y values, making the coins y position random and adding 6 so it fits within the range of the player boundries
 00000506  B8 00000011			mov eax,17
 0000050B  E8 00000000 E		call RandomRange	
 00000510  83 C0 03			add eax, 3			
 00000513  A2 000001E3 R		mov yCoin, al

 00000518  B9 00000005			mov ecx, 5
						;This is looped based off the actual score
 0000051D  02 0D 00000045 R		add cl, score				
 00000523  BE 00000000			mov esi, 0

 00000528					checkCoinXPos:

 00000528  0F B6 05					movzx eax,  xCoin
	   000001E2 R
 0000052F  3A 86 000000AF R				cmp al, xPos[esi]		
 00000535  74 04					je checkCoinYPos			;jump if xPos of snake at esi = xPos of coin
 00000537						continueloop:
 00000537  46							inc esi
 00000538  E2 EE							loop checkCoinXPos
									;the function will return if the snake aint touchin da coin
 0000053A  C3							ret							

 0000053B							checkCoinYPos:
 0000053B  0F B6 05							movzx eax, yCoin
	   000001E3 R
					
 00000542  3A 86 00000118 R					cmp al, yPos[esi] ;compares the y value of the snake head to the coin 

 00000548  75 ED					jne continueloop			; jump back to continue loop if yPos of snake at esi != yPos of coin
 0000054A  E8 FFFFFFA5					call CreateRandom			; coin generated on snake, calling function again to create another set of coordinates

 0000054F			CreateRandom ENDP

 0000054F			DrawCoin PROC						

						;procedure to draw coin
 0000054F  B8 000000EE					mov eax,yellow (yellow * 16)
 00000554  E8 00000000 E				call SetTextColor				
						;set color to yellow for coin
 00000559  8A 15 000001E2 R				mov dl,xCoin
 0000055F  8A 35 000001E3 R				mov dh,yCoin
 00000565  E8 00000000 E				call Gotoxy
					
 0000056A  B0 FE				mov al, 254
 0000056C  E8 00000000 E			call WriteChar
 00000571  B8 0000000F				mov eax,white (black * 16)		;reset color to black and white
 00000576  E8 00000000 E			call SetTextColor
 0000057B  C3					ret

 0000057C			DrawCoin ENDP



 0000057C			CheckIfTouch PROC		
						;check whether the snake head collides w its body 
 0000057C  A0 000000AF R		mov al, xPos[0] 
 00000581  8A 25 00000118 R		mov ah, yPos[0] 
 00000587  BE 00000004			mov esi,4				;start checking from index 4(5th unit)
 0000058C  B9 00000001			mov ecx,1
 00000591  02 0D 00000045 R		add cl,score
 00000597					checkXposition:
 00000597  38 86 000000AF R				cmp xPos[esi], al		;check if xpos same ornot
 0000059D  74 08					je XposSame
 0000059F						contloop:
 0000059F  46						inc esi
 000005A0  E2 F5				loop checkXposition

 000005A2  E9 FFFFFC6B			jmp checkcoin
 000005A7				XposSame:				; if xpos same, check for ypos
 000005A7  38 A6 00000118 R		cmp yPos[esi], ah
 000005AD  0F 84 FFFFFCA9		je died					;if collides, snake dies
 000005B3  EB EA			jmp contloop

 000005B5			CheckIfTouch ENDP



 000005B5			EatCoin PROC
					
					;Whenever the snake eats a coin this procedure should be called
					;this proc will increase the score, as well as call the other two procedures for the coin
					;creating a new random location for the coin while also checking the collision, and also placing the new coin

 000005B5  FE 05 00000045 R		inc score
 000005BB  BB 00000004				mov ebx,4
 000005C0  02 1D 00000045 R			add bl, score
 000005C6  8B F3				mov esi, ebx
 000005C8  8A A6 00000117 R			mov ah, yPos[esi-1]
 000005CE  8A 86 000000AE R			mov al, xPos[esi-1]	
 000005D4  88 86 000000AF R			mov xPos[esi], al		;add one unit to the snake
 000005DA  88 A6 00000118 R			mov yPos[esi], ah		;pos of new tail = pos of old tail

 000005E0  38 86 000000AD R			cmp xPos[esi-2], al		;check if the old tail and the unit before is on the yAxis
 000005E6  75 1A				jne checky				;jump if not on the yAxis

 000005E8  38 A6 00000116 R		cmp yPos[esi-2], ah		;check if the new tail should be above or below of the old tail 
 000005EE  7C 02				jl incy			
 000005F0  7F 08				jg decy
							;increment if its above
 000005F2					incy:					
 000005F2  FE 86 00000118 R			inc yPos[esi]
 000005F8  EB 20				jmp continue
							;decriment if it is aboved
 000005FA					decy:					
 000005FA  FE 8E 00000118 R			dec yPos[esi]
 00000600  EB 18				jmp continue

						;the old tail and the unit before on the x axis gets checked
 00000602					checky:					
 00000602  38 A6 00000116 R				cmp yPos[esi-2], ah		
 00000608  7C 02					jl incx
 0000060A  7F 08					jg decx
 0000060C						incx:					;inc if right
 0000060C  FE 86 000000AF R				inc xPos[esi]			
 00000612  EB 06					jmp continue
 00000614						decx:					;dec if left
 00000614  FE 8E 000000AF R				dec xPos[esi]

 0000061A				continue:				;add snake tail and update new coin
 0000061A  E8 FFFFFE60				call DrawPlayer		
 0000061F  E8 FFFFFED0				call CreateRandom
 00000624  E8 FFFFFF26				call DrawCoin			

						;this prints the updates score 
 00000629  B2 10				mov dl,16				
 0000062B  B6 03				mov dh,3
 0000062D  E8 00000000 E			call Gotoxy
 00000632  A0 00000045 R			mov al,score
 00000637  E8 00000000 E			call WriteInt
 0000063C  C3					ret
 0000063D			EatCoin ENDP


 0000063D			PlayerDeath PROC
					
					;upon death, to simulate real life, there is a brief moment where all the snakes memories will flood back all at once
					;this is why there is a delay
 0000063D  B8 000003E8			mov eax, 1000
 00000642  E8 00000000 E		call delay
 00000647  E8 00000000 E		Call ClrScr	
					
					;in red text this will print the text that "you died"
 0000064C  B2 0F				mov dl,	15
 0000064E  B6 0C				mov dh, 12
 00000650  E8 00000000 E			call Gotoxy
 00000655  B8 00000004				mov eax, red
 0000065A  E8 00000000 E			call SetTextColor
						;prints "you died :(" in red
 0000065F  BA 000001A8 R			mov edx, OFFSET strDeath	
 00000664  E8 00000000 E			call WriteString
 00000669  B8 0000000F				mov eax, white
 0000066E  E8 00000000 E			call SetTextColor

						;this displays your overall score
 00000673  B2 0D					mov dl,	13
 00000675  B6 0E					mov dh, 14
 00000677  E8 00000000 E				call Gotoxy
 0000067C  0F B6 05					movzx eax, score
	   00000045 R
							;prints the score
 00000683  E8 00000000 E				call WriteInt
 00000688  BA 000001B2 R				mov edx, OFFSET strPrintingScore	;display score
 0000068D  E8 00000000 E				call WriteString

						;this will print "try again"
 00000692  B2 0A					mov dl,	10
 00000694  B6 12					mov dh, 18
 00000696  E8 00000000 E				call Gotoxy
 0000069B  BA 00000181 R				mov edx, OFFSET strTryAgain
 000006A0  E8 00000000 E				call WriteString		

 000006A5				retry:
 000006A5  B6 0A				mov dh, 10
 000006A7  B2 01				mov dl,	1
 000006A9  E8 00000000 E			call Gotoxy
 000006AE  E8 00000000 E			call ReadInt			
					
							;if the player enters 1, the game restarts
 000006B3  3C 01				cmp al, 1
 000006B5  0F 84 FFFFFBA6			je playagn
					
						;if they choose zero, the game closes
 000006BB  3C 00				cmp al, 0
 000006BD  0F 84 FFFFFBA3			je exitgame				

 000006C3  B6 11				mov dh,	17
 000006C5  E8 00000000 E			call Gotoxy

						;if the input is wrong, it will print "invalid input"
 000006CA  BA 0000019A R			mov edx, OFFSET invalidInput	
 000006CF  E8 00000000 E			call WriteString		

 000006D4  B2 38				mov dl,	56
 000006D6  B6 13				mov dh, 19
 000006D8  E8 00000000 E			call Gotoxy

								;removes the previous input, deletes it by writing a big blank string, then jumps back to the start
 000006DD  BA 000001BC R				mov edx, OFFSET blank			
 000006E2  E8 00000000 E				call WriteString
 000006E7  EB BC					jmp retry						;let user input again by jumping back

 000006E9			PlayerDeath ENDP



				END main
Microsoft (R) Macro Assembler Version 14.34.31942.0	    11/27/23 15:31:09
SamCullebLabQ1.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000260 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000006E9 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CheckIfTouch . . . . . . . . . .	P Near	 0000057C _TEXT	Length= 00000039 Public STDCALL
  checkXposition . . . . . . . .	L Near	 00000597 _TEXT	
  contloop . . . . . . . . . . .	L Near	 0000059F _TEXT	
  XposSame . . . . . . . . . . .	L Near	 000005A7 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateRandom . . . . . . . . . .	P Near	 000004F4 _TEXT	Length= 0000005B Public STDCALL
  checkCoinXPos  . . . . . . . .	L Near	 00000528 _TEXT	
  continueloop . . . . . . . . .	L Near	 00000537 _TEXT	
  checkCoinYPos  . . . . . . . .	L Near	 0000053B _TEXT	
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Difficulty . . . . . . . . . . .	P Near	 000003F1 _TEXT	Length= 00000070 Public STDCALL
  invalidspeed . . . . . . . . .	L Near	 0000042C _TEXT	
DrawBody . . . . . . . . . . . .	P Near	 000004A0 _TEXT	Length= 00000037 Public STDCALL
  printbodyloop  . . . . . . . .	L Near	 000004AB _TEXT	
DrawCoin . . . . . . . . . . . .	P Near	 0000054F _TEXT	Length= 0000002D Public STDCALL
DrawPlayer . . . . . . . . . . .	P Near	 0000047F _TEXT	Length= 00000021 Public STDCALL
DrawPoints . . . . . . . . . . .	P Near	 00000461 _TEXT	Length= 0000001E Public STDCALL
DrawWall . . . . . . . . . . . .	P Near	 00000356 _TEXT	Length= 0000009B Public STDCALL
  L11  . . . . . . . . . . . . .	L Near	 000003AD _TEXT	
  L12  . . . . . . . . . . . . .	L Near	 000003D2 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EatCoin  . . . . . . . . . . . .	P Near	 000005B5 _TEXT	Length= 00000088 Public STDCALL
  incy . . . . . . . . . . . . .	L Near	 000005F2 _TEXT	
  decy . . . . . . . . . . . . .	L Near	 000005FA _TEXT	
  checky . . . . . . . . . . . .	L Near	 00000602 _TEXT	
  incx . . . . . . . . . . . . .	L Near	 0000060C _TEXT	
  decx . . . . . . . . . . . . .	L Near	 00000614 _TEXT	
  continue . . . . . . . . . . .	L Near	 0000061A _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlayerDeath  . . . . . . . . . .	P Near	 0000063D _TEXT	Length= 000000AC Public STDCALL
  retry  . . . . . . . . . . . .	L Near	 000006A5 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RestartGame  . . . . . . . . . .	P Near	 000002EB _TEXT	Length= 0000006B Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
TitleScreen  . . . . . . . . . .	P Near	 00000274 _TEXT	Length= 00000077 Public STDCALL
  waitForKey . . . . . . . . . .	L Near	 000002D0 _TEXT	
  startGame  . . . . . . . . . .	L Near	 000002DB _TEXT	
UpdatePlayer . . . . . . . . . .	P Near	 000004D7 _TEXT	Length= 0000001D Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000274 Public STDCALL
  drawSnake  . . . . . . . . . .	L Near	 0000001E _TEXT	
  gameLoop . . . . . . . . . . .	L Near	 00000035 _TEXT	
  processInput . . . . . . . . .	L Near	 00000045 _TEXT	
  noKey  . . . . . . . . . . . .	L Near	 00000056 _TEXT	
  checkBottom  . . . . . . . . .	L Near	 0000008D _TEXT	
  checkLeft  . . . . . . . . . .	L Near	 000000B4 _TEXT	
  checkRight . . . . . . . . . .	L Near	 000000E8 _TEXT	
  checkTop . . . . . . . . . . .	L Near	 0000010F _TEXT	
  moveUp . . . . . . . . . . . .	L Near	 00000132 _TEXT	
  moveDown . . . . . . . . . . .	L Near	 0000016D _TEXT	
  moveLeft . . . . . . . . . . .	L Near	 000001A8 _TEXT	
  moveRight  . . . . . . . . . .	L Near	 000001DD _TEXT	
  dontChgDirection . . . . . . .	L Near	 00000245 _TEXT	
  dontGoLeft . . . . . . . . . .	L Near	 00000250 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blank  . . . . . . . . . . . . .	Byte	 000001BC _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
checkcoin  . . . . . . . . . . .	L Near	 00000212 _TEXT	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
died . . . . . . . . . . . . . .	L Near	 0000025C _TEXT	
exitgame . . . . . . . . . . . .	L Near	 00000266 _TEXT	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputChar  . . . . . . . . . . .	Byte	 000001E4 _DATA	
invalidInput . . . . . . . . . .	Byte	 0000019A _DATA	
lastInputChar  . . . . . . . . .	Byte	 000001E5 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
playagn  . . . . . . . . . . . .	L Near	 00000261 _TEXT	
red  . . . . . . . . . . . . . .	Number	 00000004h   
score  . . . . . . . . . . . . .	Byte	 00000045 _DATA	
snake  . . . . . . . . . . . . .	Byte	 00000046 _DATA	
speed  . . . . . . . . . . . . .	DWord	 000001EE _DATA	
strDeath . . . . . . . . . . . .	Byte	 000001A8 _DATA	
strDifficulty  . . . . . . . . .	Byte	 000001E6 _DATA	
strInstructions  . . . . . . . .	Byte	 0000022B _DATA	
strPrintingScore . . . . . . . .	Byte	 000001B2 _DATA	
strScore . . . . . . . . . . . .	Byte	 0000003D _DATA	
strSpaceToStart  . . . . . . . .	Byte	 0000020C _DATA	
strTitleSentence . . . . . . . .	Byte	 000001F2 _DATA	
strTryAgain  . . . . . . . . . .	Byte	 00000181 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xCoin  . . . . . . . . . . . . .	Byte	 000001E2 _DATA	
xPosWall . . . . . . . . . . . .	Byte	 00000035 _DATA	
xPos . . . . . . . . . . . . . .	Byte	 000000AF _DATA	
xWall  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
yCoin  . . . . . . . . . . . . .	Byte	 000001E3 _DATA	
yPosWall . . . . . . . . . . . .	Byte	 00000039 _DATA	
yPos . . . . . . . . . . . . . .	Byte	 00000118 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
